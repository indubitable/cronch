@page "{id:Guid}"
@model cronch.Pages.ExecutionDetailsModel
@{
    ViewData["Title"] = "Job Execution Details";
}

<script type="text/javascript">
    var autoScroll = true;
    document.body.addEventListener('htmx:afterSwap', function (evt) {
        const newLines = document.querySelectorAll('#live-refresh-helper>span');

        if (newLines.length > 0) {
            const jobOutputParent = document.querySelector('.job-output code');
            newLines.forEach(el => jobOutputParent.appendChild(el));

            if (autoScroll) {
                document.querySelector('.job-output code>span:last-child').scrollIntoView({ block: 'end', behavior: 'smooth' });
            }
        }

        if (document.querySelector('#live-refresh-helper').dataset.isRunning !== 'true') {
            document.getElementById('auto-scroll')?.remove();
            document.getElementById('auto-scroll-label')?.remove();
        }
    });
</script>

<div class="text-center" id="content-root">
    <h1 class="display-4">Job Execution Details</h1>
    <br />
    @if (Model.Execution.ExecutionId == Guid.Empty)
    {
        <div class="container">
            <div class="card border-warning">
                <div class="card-body">
                    <h5 class="card-title">Job Execution Not Found</h5>
                    <p class="card-text">The requested job execution could not be found. If the job was just started, please wait - this page will refresh periodically.</p>
                </div>
            </div>
        </div>
        <script type="text/javascript">
            setTimeout(() => document.location.reload(), 5000);
        </script>
    }
    else
    {
        <div class="container" id="job-metadata" hx-get="@(HttpContext.Request.Path)?lastLineCount=@Model.JobOutputProcessedLines" hx-trigger="@(Model.Execution.Status == Models.ExecutionStatus.Running ? "every 3s" : "never")" hx-swap="outerHTML" hx-select="#job-metadata">
            <table class="table table-striped text-start">
                <tbody>
                    <tr>
                        <th>Job name</th>
                        <td>@Model.Execution.JobName</td>
                        <th>Status</th>
                        <td>@Model.Execution.Status.ToUserString()</td>
                    </tr>
                    <tr>
                        <th>Launch date/time</th>
                        <td>@Model.Execution.StartedOn.ToLocalTime().ToString("G")</td>
                        <th>Termination reason</th>
                        @if (Model.Execution.Status == Models.ExecutionStatus.Running)
                        {
                            <td>
                                N/A
                                <button class="btn btn-sm btn-danger ms-2" data-bs-toggle="modal" data-bs-target="#confirmKillModal">Terminate</button>
                            </td>
                        }
                        else
                        {
                            <td>@Model.Execution.StopReason.ToUserString()</td>
                        }
                    </tr>
                    <tr>
                        <th>Termination date/time</th>
                        @if (Model.Execution.Status == Models.ExecutionStatus.Running)
                        {
                            <td>N/A</td>
                        }
                        else
                        {
                            <td>@(Model.Execution.CompletedOn.HasValue ? Model.Execution.CompletedOn.Value.ToString("G") : "Unknown")</td>
                        }
                        <th>Run duration</th>
                        <td>@(Model.Execution.CompletedOn.HasValue || Model.Execution.Status == Models.ExecutionStatus.Running ? Model.Execution.FormattedDuration : "Unknown")</td>
                    </tr>
                </tbody>
            </table>
            <div id="live-refresh-helper" class="d-none" data-is-running="@(Model.Execution.Status == Models.ExecutionStatus.Running ? "true" : "false")">
                @Html.Raw(Model.JobOutputProcessed)
            </div>
        </div>
        <div class="text-start mb-1">
            <span class="h4">Output:</span>
            @if (Model.Execution.Status == Models.ExecutionStatus.Running)
            {
                <input type="checkbox" class="form-check-inline ms-5 me-0" id="auto-scroll" checked="checked" onchange="autoScroll=this.checked;" />
                <label for="auto-scroll" class="form-check-label" id="auto-scroll-label">Automatically scroll to new output</label>
            }
        </div>
        <div class="container p-2 w-100 vh-50 text-bg-dark text-start overflow-hidden job-output">
            <div class="h-100 overflow-auto">
                <pre class="overflow-visible"><code>@Html.Raw(Model.JobOutputProcessed)</code></pre>
            </div>
        </div>
        <script type="text/javascript">
            const source = document.querySelector('.job-output code');
            source.addEventListener('copy', (event) => {
                const selection = document.getSelection();
                event.clipboardData.setData('text/plain', selection.toString());
                event.preventDefault();
            });
        </script>
    }
    <div class="modal fade" id="confirmKillModal" tabindex="-1" aria-labelledby="confirmKillModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="confirmKillModalLabel">Terminate?</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body text-start">
                    Are you sure you want to terminate this execution?
                </div>
                <div class="modal-footer">
                    <form method="post" asp-page-handler="KillNow">
                        <input type="hidden" name="id" value="@Model.Execution.ExecutionId" />

                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-danger">Terminate</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
